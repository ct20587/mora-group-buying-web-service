<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cynerds.mgb.mybatis.MGBMapper">
    <resultMap id="MGBTracks" type="MGBTracks">
        <id column="id"/>
        <!-- Absence of property attribute is not a mistake, this is is only for result grouping that  -->
        <!-- is required due to mybatis' limit -->
        <association property="tracks" javaType="ArrayList" resultMap="Track"/>
        <association property="totalFoundTracks" column="id" select="total"/>
    </resultMap>

    <resultMap id="Track" type="Track">
        <id column="track_id" property="trackId"/>
        <result column="album_id" property="albumId"/>
        <result column="track_no" property="trackNo"/>
        <result column="track_name" property="trackName"/>
        <result column="artist" property="artist"/>
        <result column="price" property="price"/>
        <result column="purchase_date" property="purchaseDate"/>
        <result column="memo" property="memo"/>
        <result column="creator"  property="creator"/>
        <result column="create_date"  property="createDate"/>
        <result column="updater"  property="updater"/>
        <result column="update_date"  property="updateDate"/>
    </resultMap>

    <resultMap id="Album" type="Album">
        <id column="album_id" property="albumId"/>
        <result column="album_name" property="albumName"/>
        <result column="artist" property="artist"/>
        <result column="cover_art" property="coverArt"/>
        <result column="url" property="url"/>
        <result column="creator"  property="creator"/>
        <result column="create_date"  property="createDate"/>
        <result column="updater"  property="updater"/>
        <result column="update_date"  property="updateDate"/>
    </resultMap>

    <resultMap id="TrackCoBuyerMapping" type="TrackCoBuyerMapping">
        <id column="track_id" property="trackId"/>
        <collection property="coBuyers" javaType="ArrayList" ofType="String">
            <result column="co_buyer" />
        </collection>
    </resultMap>

    <select id="queryTracks" resultMap="MGBTracks">
        SELECT
            SQL_CALC_FOUND_ROWS 1 AS id,
            track_id, album_id, track_no, track_name, artist,
            price, purchase_date, memo, creator, create_date,
            updater, update_date
        FROM
            track
        ORDER BY
            create_date desc, album_id, track_no
        LIMIT
        <choose>
            <when test="offset == null and size != null">
                0, #{size}
            </when>
            <when test="offset != null and size != null">
                #{offset}, #{size}
            </when>
            <otherwise>
                0, 20
            </otherwise>
        </choose>
    </select>

    <select id="total" resultType="int">
        SELECT FOUND_ROWS() as total
    </select>

    <select id="queryAlbums" resultMap="Album">
        SELECT
            album_id, album_name, artist, cover_art, url,
            creator, create_date, updater, update_date
        FROM
            album
        WHERE
            album_id
        IN
            <foreach collection="albumIds" item="albumId" open="(" close=")" separator=",">
                #{albumId}
            </foreach>
    </select>

    <select id="queryTrackCoBuyerMappings" resultMap="TrackCoBuyerMapping">
        SELECT
            track_id, co_buyer
        FROM
            track_co_buyer
        WHERE
            track_id
        IN
        <foreach collection="userIds" item="userId" open="(" close=")" separator=",">
            #{userId}
        </foreach>
    </select>

    <!-- Maybe could refactor to a insert on duplicate key update statement -->
    <insert id="createAlbum">
        INSERT INTO album
            (
                album_id, album_name,
                artist, url,
                creator, create_date
            )
        VALUES
            (
                #{album.albumId}, #{album.albumName},
                #{album.artist}, #{album.url},
                "SYSTEM", NOW()
            )
    </insert>

    <insert id="createTrack" useGeneratedKeys="true" keyProperty="track.trackId">
        INSERT INTO track
            (
                album_id, track_no, track_name, artist, price,
                memo, purchase_date, creator, create_date
            )
        VALUES
            (
                #{track.albumId}, #{track.trackNo}, #{track.trackName}, #{track.artist}, #{track.price},
                #{track.memo}, NOW(), 'SYSTEM', NOW()
            )
    </insert>


    <!-- Maybe need to think about insert with generated key retrieved from previous track insert sql -->
    <!-- or by nested select sql e.g. ```insert into track_co_buyer (track_id, co_buyer)  -->
    <!-- values ((SELECT track_id FROM track WHERE album_id = #{track.albumId} AND track_no = #{track.trackNo}), "SYSTEM")``` -->
    <insert id="createTrackCoBuyerMappings">
        INSERT INTO track_co_buyer
                ( track_id, co_buyer, creator, create_date )
        VALUES
            <foreach collection="track.coBuyers" item="coBuyer" separator=",">
                ( #{track.trackId}, #{coBuyer}, "SYSTEM", NOW() )
            </foreach>
    </insert>

    <update id="updateAlbum">
        UPDATE album
            <set>
                <if test="album.albumName != null"> album_name = #{album.albumName}, </if>
                <if test="album.artist != null"> artist = #{album.artist}, </if>
                <if test="album.coverArt != null"> cover_art = #{album.coverArt}, </if>
                <if test="album.url != null"> url = #{album.url}, </if>
                updater = 'SYSTEM',
                update_date = NOW()
            </set>
        WHERE
            album_id = #{album.albumId}
    </update>
</mapper>